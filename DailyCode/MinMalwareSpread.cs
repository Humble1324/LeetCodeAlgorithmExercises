using System;
using System.Collections.Generic;
using System.Linq;

namespace LeetCode.DailyCode;

public partial class DailyCode
{
    public int MinMalwareSpread(int[][] graph, int[] initial)
    {
        int lens = graph.Length;
        int[] ids = new int[lens];
        Dictionary<int, int> idSize = new Dictionary<int, int>();
        int id = 0;
        for (int i = 0; i < lens; i++)
        {
            if (ids[i] == 0) //只要当前节点还没“站队”
            {
                id++;
                int size = 1; //队伍计数
                Queue<int> queue = new Queue<int>();
                queue.Enqueue(i);
                ids[i] = id;
                while (queue.Count > 0)
                {
                    //从未站队的这排找他朋友，给站队序号
                    var t = queue.Dequeue();
                    for (var v = 0; v < lens; v++)
                    {
                        if (ids[v] == 0 && graph[t][v] == 1)
                        {
                            size++;
                            queue.Enqueue(v);
                            ids[v] = id;
                        }
                    }
                }

                //站队的序号和人数
                idSize.Add(id, size);
            }
        }

        var idToInit = new Dictionary<int, int>();
        foreach (var i in initial)
        {
            idToInit.TryAdd(ids[i], 0);
            idToInit[ids[i]]++;
        }

        var ans = lens + 1;
        var ansR = 0;
        foreach (var u in initial)
        {
            int removed = (idToInit[ids[u]] == 1 ? idSize[ids[u]] : 0);
            if (removed > ansR || (removed == ansR && u < ans))
            {
                ans = u;
                ansR = removed;
            }
        }

        return ans;
    }

    public int MinMalwareSpreadII(int[][] graph, int[] initial)
    {
        return 0;
    }
}